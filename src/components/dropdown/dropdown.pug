include ../button/button

//-
  options.title - заголовок компонента, может быть массивом если isSplit true
  options.condition - текст, показывающий в каком состоянии находится компонент, может быть массивом если isSplit true
  options.placeholder - строка placeholder дропдауна, может быть массивом если isSplit true
  options.maxLen - максимальное количество символов в инпуте, лишние будут отброшены
  options.type - тип dropdown, допустимые значения: 'counter' | 'summator' | 'datepicker'
  options.rows - только для 'summator' | 'counter', массив объектов
  options.rows[0].text - текст строки
  options.rows[0].counter - значение счётчика этой строки
  options.rows[0].countables - массив, содержащий три формы rows[0].text (например: ['кровать', 'кровати',
    'кроватей']). Для 'summator', можно не указывать, но если указано, то данная строка будет подсчитываться отдельно
  options.hasControls - только для 'summator' | 'counter', если true, то в разделе контента у dropdown появятся 
    две кнопки 'очистить' и 'принять'
  options.countables - только для 'summator', массив, содержащий три формы подсчитываемого в dropdown 
  options.isRange - только для 'datepicker', если true, то в календаре у datepicker можно будет выбрать две даты 
  options.isSplit - только для 'datepicker', если true, то у range-datepicker одно поле будет разделено на два
  options.selected - только для 'datepicker', массив дат в формате 'yyyy-mm-dd', которые будут выбраны изначально
  options.isContentOnly - если true, то у dropdown будет виден только контент 
  options.isExpanded - если true, то dropdown будет всегда раскрыт
  options.valueChanged - название триггера, который будет запускаться при изменении dropdown
mixin dropdown(options = {})
  -
    const { 
      title = '',
      condition = '',
      placeholder = '',
      rows = [], 
      maxLen = 100,
      type = 'counter',
      isExpanded = false,
      hasControls = false, 
      isRange = false,
      isSplit = false,
      isContentOnly = false,
      countables = [], 
      selected = [],
      valueChanged, 
    } = options;

    let buttons = [{ title, condition, placeholder }];
    if (isSplit) {
      buttons = [{}, {}];
      buttons.forEach((button, index) => {
        button.title = (typeof title === 'string') ? title : title[index];
        button.condition = (typeof condition === 'string') ? condition : condition[index];
        button.placeholder = (typeof placeholder === 'string') ? placeholder : placeholder[index];
      });
    }

    const classes = [];
    if (type === 'summator') classes.push('dropdown_summator');
    else if (type === 'datepicker') classes.push('dropdown_datepicker');
    if (isExpanded) classes.push('dropdown_expanded');
    if (isContentOnly) classes.push('dropdown_content-only');

  .dropdown.js-dropdown(
    class = classes 
    data-type = type
    data-value-changed = valueChanged
    data-max-len = maxLen
    data-has-controls = hasControls
    data-countables = (type === 'summator') ? countables : null
    data-is-range = isRange
    data-is-split = isSplit
    data-selected = selected
    )
    .dropdown__inputs.js-dropdown__inputs(class = (isSplit) ? 'dropdown__inputs_split' : null)
      each button in buttons 
        .dropdown__input
          .dropdown__info
            .dropdown__title= button.title
            .dropdown__condition= button.condition
          .dropdown__input-box.js-dropdown__input-box
            input.dropdown__text.js-dropdown__text(type = text placeholder = button.placeholder readonly = true)
            .dropdown__icon expand_more
    .dropdown__content.js-dropdown__content
      if type !== 'datepicker'
        each row in rows
          .dropdown__row.js-dropdown__row(data-row-countables = row.countables)
            .dropdown__row-text= row.text
            .dropdown__row-buttons
              .dropdown__button-minus.js-dropdown__button-minus(class = (row.counter !== 0) ? 'dropdown__button-minus_active' : '') -
              .dropdown__counter.js-dropdown__counter= row.counter
              .dropdown__button-plus.js-dropdown__button-plus.dropdown__button-plus_active +
        if hasControls
          .dropdown__control-buttons
            .dropdown__clear-button.js-dropdown__clear-button
              +button({ text: 'очистить'})
            .dropdown__accept-button.js-dropdown__accept-button
              +button({ text: 'применить'})
